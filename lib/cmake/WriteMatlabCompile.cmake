###########################################################
#	Write the Matlab compile script to compile the MEX interface to SceneML
###########################################################
#INCLUDE( ${CMAKE_ROOT}/Modules/CheckIncludeFile.cmake )
#INCLUDE( ${CMAKE_ROOT}/Modules/CheckFunctionExists.cmake )

set( COMPILE_M ${PROJECT_BINARY_DIR}/compileScene.m )

# Only write config.h once
if ( WROTE_COMPILE_M )
	message( STATUS "Not writing compileScene.m -- wrote it previously" )
else ( WROTE_COMPILE_M )  
	message( STATUS "Writing compileScene.m" )
	set( WROTE_COMPILE_M TRUE CACHE BOOL "Wrote compileScene.m" )

	file( WRITE ${COMPILE_M}	"% compileScene.m - Generated by CMakeLists.txt \n\n" )
	file( APPEND ${COMPILE_M}	"files = {'astar_search_mex.c', 'bfs_mex.c', 'dfs_mex.c', 'biconnected_components_mex.c', ...
	     'components_mex.c', 'matlab_bgl_sp_mex.c', ...
	     'matlab_bgl_all_sp_mex.c', ...
	     'mst_mex.c', 'clustering_coefficients_mex.c', ...
	     'betweenness_centrality_mex.c', ...
	     'max_flow_mex.c', ...
         'bfs_dfs_vis_mex.c'};
     
c = computer;

large_arrays = 0;
solaris = 0;
mac = 0;

switch (computer)
    case 'PCWIN'
        libname = 'mbgl-pcwin32';
    case 'GLNX86'
        libname = 'mbgl-linux-32';
    case 'MAC'
        libname = 'mbgl-macosx-ppc-32';
    case 'MACI'
        libname = 'mbgl-macosx-intel-32';
    case 'SOL2'
        solaris = 1;
        error('Not currently supported...\n');
    case 'PCWIN64'
        libname = 'mbgl-pcwin64-large';
        large_arrays = 1;
    case 'SOL64'
        solaris = 1;
        error('Not currently supported...\n');
    case 'GLNXA64'
        libname = 'mbgl-linux-64-large';
        large_arrays = 1;
    otherwise
        error('Not currently supported...\n');
end

mexflags = '';

if (large_arrays)
    mexflags = [mexflags ' -largeArrayDims -DMATLAB_BGL_LARGE_ARRAYS '];
end
	     
if (ispc)
    % must change /MD to /ML in mexopts.bat
	%mexflags = '-O -I..\libmbgl\include LINKFLAGS#''$LINKFLAGS -libpath:..\libmbgl\Release'' LINKFLAGSPOST#''$LINKFLAGSPOST libmbgl.lib''';
    mexflags = [mexflags sprintf('-O -I..\\libmbgl\\include LINKFLAGS#''$LINKFLAGS -libpath:..\\libmbgl\\Release'' LINKFLAGSPOST#''$LINKFLAGSPOST lib%s.lib''', libname)];
elseif (mac)
    % mac specific options
elseif (isunix)
    % 
    if (solaris)
    else
        mexflags = [mexflags '-O -I../libmbgl/include -L../libmbgl '];
    end
    
    mexflags = [mexflags sprintf('-l%s', libname)];
end;

for file = mbglfiles
     mexstr = ['mex ' mexflags ' ' char(file)];
     fprintf('%s\n', mexstr);
     eval(mexstr);
end;

	if ( WIN32 )
		FILE( APPEND ${COMPILE_M} "#ifndef uint\n" )
	    FILE( APPEND ${COMPILE_M} "#define uint unsigned int\n" )
	    FILE( APPEND ${COMPILE_M} "#endif\n\n" )

	    FILE( APPEND ${COMPILE_M} "// MSVC compiler requires this symbol before exposing the (apparently)\n" )
	    FILE( APPEND ${COMPILE_M} "// non-standard symbols M_PI, etc...\n" )
	    FILE( APPEND ${COMPILE_M} "#define _USE_MATH_DEFINES\n\n" )

	    FILE( APPEND ${COMPILE_M} "// Just in case the above line didn't fix it...\n" )
	    FILE( APPEND ${COMPILE_M} "#ifndef M_PI\n" )
	    FILE( APPEND ${COMPILE_M} "#define M_PI 3.14159265358979323846\n" )
	    FILE( APPEND ${COMPILE_M} "#endif\n\n" )
	else ( WIN32 )
		CHECK_INCLUDE_FILE( termio.h HAVE_TERMIO_H )
		IF( HAVE_TERMIO_H )
			SET( VAL 1 )
		ELSE( HAVE_TERMIO_H )
			SET( VAL 0 )
		ENDIF( HAVE_TERMIO_H )
		FILE( APPEND ${COMPILE_M} "#define HAVE_TERMIO_H ${VAL}\n\n" )

		CHECK_INCLUDE_FILE( linux/input.h HAVE_LINUX_INPUT_H )
		IF( HAVE_LINUX_INPUT_H )
		SET( VAL 1 )
		ELSE( HAVE_LINUX_INPUT_H )
		  SET( VAL 0 )
		ENDIF( HAVE_LINUX_INPUT_H )
		FILE( APPEND ${COMPILE_M} "#define HAVE_LINUX_INPUT_H ${VAL}\n\n" )

		CHECK_INCLUDE_FILE( string.h HAVE_STRING_H )
		IF( HAVE_STRING_H )
		  SET( VAL 1 )
		ELSE( HAVE_STRING_H )
		  SET( VAL 0 )
		ENDIF( HAVE_STRING_H )
		FILE( APPEND ${COMPILE_M} "#define HAVE_STRING_H ${VAL}\n\n" )

		CHECK_INCLUDE_FILE( stdlib.h HAVE_STDLIB_H )
		IF( HAVE_STDLIB_H )
		  SET( VAL 1 )
		ELSE( HAVE_STDLIB_H )
		  SET( VAL 0 )
		ENDIF( HAVE_STDLIB_H )
		FILE( APPEND ${COMPILE_M} "#define HAVE_STDLIB_H ${VAL}\n\n" )

		CHECK_INCLUDE_FILE( unistd.h HAVE_UNISTD_H )
		IF( HAVE_UNISTD_H )
		  SET( VAL 1 )
		ELSE( HAVE_UNISTD_H )
		  SET( VAL 0 )
		ENDIF( HAVE_UNISTD_H )
		FILE( APPEND ${COMPILE_M} "#define HAVE_UNISTD_H ${VAL}\n\n" )

		CHECK_INCLUDE_FILE( sys/types.h HAVE_SYS_TYPES_H )
		IF( HAVE_SYS_TYPES_H )
		  SET( VAL 1 )
		ELSE( HAVE_SYS_TYPES_H )
		  SET( VAL 0 )
		ENDIF( HAVE_SYS_TYPES_H )
		FILE( APPEND ${COMPILE_M} "#define HAVE_SYS_TYPES_H ${VAL}\n\n" )

		CHECK_INCLUDE_FILE( sys/stat.h HAVE_SYS_STAT_H )
		IF( HAVE_SYS_STAT_H )
		  SET( VAL 1 )
		ELSE( HAVE_SYS_STAT_H )
		  SET( VAL 0 )
		ENDIF( HAVE_SYS_STAT_H )
		FILE( APPEND ${COMPILE_M} "#define HAVE_SYS_STAT_H ${VAL}\n\n" )

		CHECK_INCLUDE_FILE( pthread.h HAVE_PTHREAD_H )
		IF( HAVE_PTHREAD_H )
		  SET( VAL 1 )
		ELSE( HAVE_PTHREAD_H )
		  SET( VAL 0 )
		ENDIF( HAVE_PTHREAD_H )
		FILE( APPEND ${COMPILE_M} "#define HAVE_PTHREAD_H ${VAL}\n\n" )

		CHECK_INCLUDE_FILE( sys/ioctl.h HAVE_SYS_IOCTL_H )
		IF( HAVE_SYS_IOCTL_H )
		  SET( VAL 1 )
		ELSE( HAVE_SYS_IOCTL_H )
		  SET( VAL 0 )
		ENDIF( HAVE_SYS_IOCTL_H )
		FILE( APPEND ${COMPILE_M} "#define HAVE_SYS_IOCTL_H ${VAL}\n\n" )

		CHECK_INCLUDE_FILE( fcntl.h HAVE_FCNTL_H )
		IF( HAVE_FCNTL_H )
		  SET( VAL 1 )
		ELSE( HAVE_FCNTL_H )
		  SET( VAL 0 )
		ENDIF( HAVE_FCNTL_H )
		FILE( APPEND ${COMPILE_M} "#define HAVE_FCNTL_H ${VAL}\n\n" )

		CHECK_INCLUDE_FILE( time.h HAVE_TIME_H )
		IF( HAVE_TIME_H )
		  SET( VAL 1 )
		ELSE( HAVE_TIME_H )
		  SET( VAL 0 )
		ENDIF( HAVE_TIME_H )
		FILE( APPEND ${COMPILE_M} "#define HAVE_TIME_H ${VAL}\n\n" )

		CHECK_INCLUDE_FILE( errno.h HAVE_ERRNO_H )
		IF( HAVE_ERRNO_H )
		  SET( VAL 1 )
		ELSE( HAVE_ERRNO_H )
		  SET( VAL 0 )
		ENDIF( HAVE_ERRNO_H )
		FILE( APPEND ${COMPILE_M} "#define HAVE_ERRNO_H ${VAL}\n\n" )

		CHECK_INCLUDE_FILE( zlib.h HAVE_ZLIB_H )
		IF( HAVE_ZLIB_H )
		  SET( VAL 1 )
		ELSE( HAVE_ZLIB_H )
		  SET( VAL 0 )
		ENDIF( HAVE_ZLIB_H )
		FILE( APPEND ${COMPILE_M} "#define HAVE_ZLIB_H ${VAL}\n\n" )

		CHECK_INCLUDE_FILE( sys/filio.h HAVE_FILIO_H )
		IF( HAVE_FILIO_H )
		  SET( VAL 1 )
		ELSE( HAVE_FILIO_H )
		  SET( VAL 0 )
		ENDIF( HAVE_FILIO_H )
		FILE( APPEND ${COMPILE_M} "#define HAVE_FILIO_H ${VAL}\n\n" )

		CHECK_FUNCTION_EXISTS( strnlen HAVE_STRNLEN )
		IF( HAVE_STRNLEN )
		  SET( VAL 1 )
		ELSE( HAVE_STRNLEN )
		  SET( VAL 0 )
		ENDIF( HAVE_STRNLEN )
		FILE( APPEND ${COMPILE_M} "#define HAVE_STRNLEN ${VAL}\n\n" )
	endif( WIN32 )
endif ( WROTE_COMPILE_M )  
